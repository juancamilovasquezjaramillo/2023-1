/* Librerias */
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

/* Estructuras */
typedef struct zone {
  char name[30];
  char description[10000];
} Zone;
typedef struct objecto {
  char name[30];
  int stats;
} Objeto;

typedef struct node {
  Objeto object;
  struct node *next;
} Node;

typedef struct grafo {
  Zone zona;
  int numeros[3];
  int size;

} Grafo;
typedef struct list {
  Node *head;
  int size;
} List;


typedef struct jugador {
  char nombre[30];
  int daño;
  int health1;
  int health2;
  int agility;
  int Mana;
  int puntosHabilidad;
  int dañoMagico
} Jugador;

typedef struct Jefe {
  char name[7];
  char data[1000];
  int health1;
  int health2;
  int pointsGift;
} Jefe;

/* Operaciones */

List *crearLista() {
  List *lista = (List *)malloc(sizeof(List));
  lista->head = NULL;
  lista->size = 0;
  return lista;
}

void anxList(List *lista, Objeto objeto) {
  Node *nuevoNodo = (Node *)malloc(sizeof(Node));
  nuevoNodo->object = objeto;
  nuevoNodo->next = NULL;

  if (lista->head == NULL) {
    lista->head = nuevoNodo;
  } else {
    Node *ultimoNodo = lista->head;
    while (ultimoNodo->next != NULL) {
      ultimoNodo = ultimoNodo->next;
    }
    ultimoNodo->next = nuevoNodo;
  }

  lista->size++;
}

void imprimirObjeto(Node *nodo) {
  printf("Nombre: %s, Estadisticas: %d\n", nodo->object.name,
         nodo->object.stats);
}

void imprimirLista(List *lista) {
  Node *nodoActual = lista->head;
  int i = 1;
  while (nodoActual != NULL) {
    printf("%d. ", i);
    imprimirObjeto(nodoActual);
    nodoActual = nodoActual->next;
    i++;
  }
}

/* Prototipos */
void menuJuego();
void personajesTipos();
void infoBestiario();
void imprimirinventario();
void modoBatalla();
void explorar();
void estadisticas();
void objetos();
void estructuraJefes();
void creacionZonas();
void avanzarZonas();
// void exportar_variables();

/* Variables */

int abilitypoints = 0;
int flag = 0;
int movimiento = 0;
Jugador jugador;
Jefe Grago;
Jefe Karin;
Jefe Gorgoroth;
Jefe Banshee;
Jefe Licantropo;
Objeto Elixir;
Objeto pociones;
Objeto BaritaMagica;
Objeto syringe;
Objeto sword;
Objeto dagger;
Grafo zonita[5];

/* Definiciones */
/*VOY A ESTAR HACIENDO PRUEBAS AQUI*/

/*void guardarEstado() {
    FILE* archivo = fopen("estado.txt", "w");
    if (archivo == NULL) {
        printf("Error al abrir el archivo.\n");
        return;
    }
    
    fprintf(archivo, "%d\n", posicionJugadorX);
    fprintf(archivo, "%d\n", posicionJugadorY);
    fprintf(archivo, "%d\n", nivelActual);
    fprintf(archivo, "%d\n", puntos);
    
    fclose(archivo);
}

// Función para cargar el estado del juego desde un archivo de texto
void cargarEstado() {
    FILE* archivo = fopen("estado.txt", "r");
    if (archivo == NULL) {
        printf("No se encontró el archivo de estado.\n");
        return;
    }
    
    fscanf(archivo, "%d", &posicionJugadorX);
    fscanf(archivo, "%d", &posicionJugadorY);
    fscanf(archivo, "%d", &nivelActual);
    fscanf(archivo, "%d", &puntos);
    
    fclose(archivo);
}*/


int main() {
  int option = 0;
  while (option != 3) {
    system("cls");
    printf("     _______.  ______    __    __   __           ______   .__   "
           "__.     _______  __  .______       _______ \n");
    printf("    /       | /  __  \\  |  |  |  | |  |         /  __  \\  |  \\ "
           "|  |    |   ____||  | |   _  \\     |   ____|\n");
    printf("   |   (----`|  |  |  | |  |  |  | |  |        |  |  |  | |   \\|  "
           "|    |  |__   |  | |  |_)  |    |  |__   \n");
    printf("    \\   \\    |  |  |  | |  |  |  | |  |        |  |  |  | |  . ` "
           " |    |   __|  |  | |      /     |   __|  \n");
    printf(".----)   |   |  `--'  | |  `--'  | |  `----.   |  `--'  | |  |\\   "
           "|    |  |     |  | |  |\\  \\----.|  |____ \n");
    printf("|_______/     \\______/   \\______/  |_______|    \\______/  |__| "
           "\\__|    |__|     |__| | _| `._____||_______|\n\n");
    printf(" =================================================================="
           "============================================= \n\n");
    printf("                                           1.Juego Nuevo\n         "
           "                                  2.continuar \n");
    printf("                                           3.Salir \n              "
           "                           Elige una opcion -->");
    scanf("%d", &option);
    switch (option) {
    case 1:
      printf("\nIniciando Juego...\n\n");
      personajesTipos();
      objetos();
      estructuraJefes();
      menuJuego();
      break;
    case 2:
      printf("\nReanudando Juego...\n\n");
      break;
    case 3:
      printf("\nSaliendo...\n\n");
      break;
    default:
      printf("\nLa opcion ingresada no existe\n\n");
      break;
    }
  }
  return 0;
}

void menuJuego() {
  creacionZonas();
  List *inventario = crearLista();
  int opcion1 = 0;
  while (opcion1 != 6 && flag == 0) {
    printf("\n1. Explorar\n2. Avanzar\n3. Estadisticas\n4. Inventario\n5. "
           "Bestiario\n6. Salir\nElige una opcion > ");
    scanf("%d", &opcion1);
    switch (opcion1) {
    case 1:
      printf("\nIniciando Exploracion...\n\n");
      explorar(inventario);
      break;
    case 2:
      printf("\nAvanzando...\n\n");
      avanzarZonas();
      printf("\n");
      modoBatalla();
      break;
    case 3:
      printf("\nCargando Estadisticas...\n\n");
      estadisticas();
      break;
    case 4:
      printf("\nAbriendo Inventario...\n\n");
      imprimirinventario(inventario);
      break;
    case 5:
      printf("\nInspeccionando Bestiario...\n\n");
      infoBestiario();
      break;
    case 6:
      printf("\nSaliendo...\n\n");
      break;
    default:
      printf("\nLa opcion ingresada no existe\n\n");
      break;
    }
  }
  if (flag == 1)
    printf("Has sido derrotado\n");
}
void objetos() {
  /* Pocion de vida */
  strcpy(Elixir.name, "Pocion de vida");
  Elixir.stats = 150;
  /* Pocion de Mana */
  strcpy(pociones.name, "Pocion de Mana");
  pociones.stats = 100;
  /* Baston Magico*/
  strcpy(BaritaMagica.name, "Baston magico");
  BaritaMagica.stats = 200;
  /* Jeringa */
  strcpy(syringe.name, "Jeringa de adrenalina");
  syringe.stats = 350;
  /* Espada */
  strcpy(sword.name, "Espada");
  sword.stats = 200;
  /* Daga */
  strcpy(dagger.name, "Daga");
  dagger.stats = 300;
}

void estructuraJefes() {
  /* Grago */
  strcpy(Grago.name, "Grago");
  strcpy(Grago.data, "Es una figura imponente con escamas oscuras y ojos carmesí. Domina las artes oscuras y controla las sombras. Su lair es un templo sombrío lleno de tesoros saqueados. Los aventureros valientes deben enfrentarse a él con habilidad y coraje para derrotarlo y liberar al mundo de su reinado de oscuridad.");
  Grago.health1 = 2500;
  Grago.health2 = 2500;
  Grago.pointsGift = 3;
  /* Karin */
  strcpy(Karin.name, "Karin");
  strcpy(Karin.data, "Vestido con una armadura oscura y emanando un aura de maldad, Karin desafía a los valientes jugadores a enfrentarse a su poderoso arsenal de habilidades y estrategias letales.");
  Karin.health1 = 3000;
  Karin.health2 = 3000;
  Karin.pointsGift = 4;
  /* Gorgoroth */
  strcpy(Gorgoroth.name, "Gorgoroth");
  strcpy(Gorgoroth.data, "Este colosal jefe acuático es conocido por su fuerza descomunal y habilidades místicas. Posee la capacidad de controlar las aguas a su voluntad, convirtiéndolas en poderosos torrentes que arrastran a los aventureros desprevenidos hacia un destino incierto. Su rugido atronador resuena a través de las profundidades, llenando de temor a aquellos que se atreven a enfrentarlo.");
  Gorgoroth.health1 = 2000;
  Gorgoroth.health2 = 2000;
  Gorgoroth.pointsGift = 2;
  /* Banshee */
  strcpy(Banshee.name, "Banshee");
  strcpy(Banshee.data, "Su cuerpo está compuesto de tierra y rocas, emanando una energía terrosa. Su piel está cubierta de musgo brillante y emite un resplandor verde y dorado, sus ojos son esferas luminosas que cambian de color, deslumbrando a quienes los miran. Banshee tiene una fuerza sobrenatural y puede manipular la tierra, levantando rocas y abriendo el suelo. También puede lanzar rayos luminosos y generar escudos de energía.");
  Banshee.health1 = 3500;
  Banshee.health2 = 3500;
  Banshee.pointsGift = 5;
  /* Licantropo */
  strcpy(Licantropo.name, "Licantropo");
  strcpy(Licantropo.data, "Con una apariencia imponente y poderes arcanos, este jefe es capaz de transformarse en un ser lobo-humano durante las noches de luna llena. Su sabiduría y conocimiento de la magia lo convierten en un oponente temible y estratégico. Solo los más valientes podrán enfrentarlo y superar sus desafíos para obtener las recompensas que guarda.");
  Licantropo.health1 = 10000;
  Licantropo.health2 = 10000;
  Licantropo.pointsGift = 10;
}

void imprimirinventario(List *inventario) { imprimirLista(inventario); }

void estadisticas() {
  int opcion3, x, flag = 0;
  while (jugador.puntosHabilidad > 0 && flag == 0) {
    printf("Estadisticas de %s:\n", jugador.nombre);
    printf("Health = %d\n", jugador.health1);
    printf("daño = %d\n", jugador.daño);
    printf("Agility = %d\n", jugador.agility);
    printf("Mana = %d\n", jugador.Mana);
    printf("Tienes %d punto/s disponible/s para asignar.\n\n", jugador.puntosHabilidad);
    printf("Deseas asignar tus puntos de habilidad?\n");
    printf("1. Si  2. No\n\nElige una opcion > ");
    scanf("%d", &x);
    printf("\n");
    if (x == 1) {
      printf("1. Increase health\n2. Increase daño\n3. Increase Agility\n4. "
             "Increase Mana\n\nElige una opcion > ");
      scanf("%d", &opcion3);
      switch (opcion3) {
      case 1:
        jugador.puntosHabilidad--;
        jugador.health1 += 100;
        printf("Tu estadistica de vida ha aumentado de %d a %d\n",
               jugador.health1 - 100, jugador.health1);
        break;
      case 2:
        jugador.puntosHabilidad--;
        jugador.daño += 100;
        printf("Tu estadistica de dano ha aumentado de %d a %d\n",
               jugador.daño - 100, jugador.daño);
        break;
      case 3:
        jugador.puntosHabilidad--;
        jugador.agility += 100;
        printf("Tu estadistica de agilidad ha aumentado de %d a %d\n",
               jugador.agility - 100, jugador.agility);
        break;
      case 4:
        jugador.puntosHabilidad--;
        jugador.Mana += 100;
        printf("Tu estadistica de Mana ha aumentado de %d a %d\n",
               jugador.Mana - 100, jugador.Mana);
        break;
      case 5:
        break;
      default:
        printf("La opcion ingresada no existe\n");
        break;
      }
    } else {
      flag = 1;
    }
  }
  if (jugador.puntosHabilidad == 0)
    printf("No tienes mas puntos para asignar\n");
}

void modoBatalla() {
  srand(time(0));
  int daño, boss = rand() % 5;
  Jefe *Variable;
  if (boss == 0) {
    Variable = &Grago;
  } else if (boss == 1) {
    Variable = &Karin;
  } else if (boss == 2) {
    Variable = &Gorgoroth;
  } else if (boss == 3) {
    Variable = &Banshee;
  } else {
    Variable = &Licantropo;
  }
  printf("Se ha encontrado con: %s\n", Variable->name);
  while (Variable->health2 > 0 && jugador.health2 > 0) {
    int opcion2 = 0, probabilidadparry = rand() % 2,
        probabilidadgolpe = rand() % 3, probabilidadesquivar = rand() % 2,
        bossdaño = rand() % (100 - 150 + 1) + 100;
    if (jugador.Mana > 0) {
      printf(
          "\n1. Ataque ligero\n2. Ataque pesado\n3. Ataque magico\n4. "
          "Esquivar\n5. Parry\nElige una opcion > ");
      scanf("%d", &opcion2);
      switch (opcion2) {
      case 1:
        Variable->health2 = Variable->health2 - jugador.daño;
        jugador.Mana -= 375;
        break;
      case 2:
        if (probabilidadgolpe != 0) {
          printf("\nAtaque exitoso\n");
          daño = jugador.daño * 2;
          Variable->health2 = Variable->health2 - daño;
        } else {
          printf("\nAtaque fallido\n");
        }
        jugador.health2 = jugador.health2 - bossdaño;
        jugador.Mana -= 390;
        break;
      case 3:
        break;
      case 4:
        if (probabilidadesquivar == 0) {
          printf("\nAtaque esquivado\n");
          bossdaño = bossdaño * 0;
        } else {
          printf("\nMuy lento\n");
        }
        jugador.Mana -= 410;
        break;
      case 5:
        if (probabilidadparry == 1) {
          printf("\nParry exitoso\n");
          bossdaño *= 0;
          Variable->health2 -= jugador.daño * 4;
        } else {
          printf("\nParry fallido\n");
        }
        jugador.Mana -= 500;
        break;
      default:
        printf("\nLa opcion ingresada no existe\n\n");
        break;
      }
    } else {
      printf("\nSin Mana, turno Perdido\n");
    }
    printf("Mana antes %d\n", jugador.Mana);
    if (jugador.Mana < 0) {
      jugador.Mana += 500;
    } else {
      jugador.Mana += (fabs(jugador.Mana) * 0.3);
    }
    jugador.health2 = jugador.health2 - bossdaño;
    printf("\nVida jugador = %d  Vida Jefe = %d\n", jugador.health2,
           Variable->health2);
    printf("EMana %d\n", jugador.Mana);
  }
  if (jugador.health2 < 0) {
    flag = 1;
  }
  if(Variable->health2 < 0){
    printf("\n Derrotaste al temible %s , gracias a tu increible hazaña recibiras : \n %d Puntos de mejora",Variable->name , Variable->pointsGift);
    jugador.puntosHabilidad += Variable->pointsGift;
  }
}

void explorar(List *inventario) {
  srand(time(0));
  char valor[3];
  int counter = 0, j, numero = rand() % 101;
  if (numero <= 5) {
    printf("Se ha encontrado: Antorcha\n");
  } else if (numero <= 8) {
    printf("Se ha encontrado: Fuente de habilidad\n");
    abilitypoints++;
  } else if (numero <= 19) {
    printf("Se ha encontrado: %s\n", Elixir.name);
    anxList(inventario, Elixir);
  } else if (numero <= 30) {
    printf("Se ha encontrado: %s\n", pociones.name);
    anxList(inventario, pociones);
  } else if (numero <= 40) {
    printf("Se ha encontrado: %s\n", BaritaMagica.name);
    anxList(inventario, BaritaMagica);
  } else if (numero <= 50) {
    printf("Se ha encontrado: %s\n", syringe.name);
    anxList(inventario, syringe);
  } else if (numero <= 60) {
    printf("Se ha encontrado: %s\n", sword.name);
    anxList(inventario, sword);
  } else if (numero <= 70) {
    printf("Se ha encontrado: %s\n", dagger.name);
    anxList(inventario, dagger);
  } else {
    printf("Se ha encontrado: nada\n");
  }
  if (numero <= 5) {
    printf("\nDesea guardar la partida? ");
    scanf("%s", &valor);
    if (strcmp(valor, "si") == 0) {
      printf("\nLa partida se ha guardado\n");
    }
  }
}

void personajesTipos() {
  char nombre[30];
  int clase;
  printf("Ingrese su nickname de jugador\n");
  scanf("%s", jugador.nombre);
  printf("1. Guerrero\n");
  printf("2. Asesino\n");
  printf("3. Tanque\n");
  printf("4. Mago\n");
  printf("Seleccione su clase > ");
  scanf("%d", &clase);
  switch (clase) {
  case 1:
    printf("Tu valia se demuestra en el campo de batalla, te conviertes en un "
           "Guerrero\n");
    jugador.daño = 200;
    jugador.health1 = 2000;
    jugador.health2 = 2000;
    jugador.agility = 40;
    jugador.Mana = 1500;
    break;
  case 2:
    printf("El sigilo te llama te has convertido en el mejor Asesino del "
           "mundo.\n");
    jugador.daño = 400;
    jugador.health1 = 1400;
    jugador.health2 = 1400;
    jugador.agility = 100;
    jugador.Mana = 1200;
    break;

  case 3:
    printf("Tu fuerza y valia son inimaginables, te has convertido en un "
           "Tanque\n");
    jugador.daño = 80;
    jugador.health1 = 3000;
    jugador.health2 = 3000;
    jugador.agility = 20;
    jugador.Mana = 1600;
    break;
  case 4:
    printf("La distancia y el estudio son lo tuyo, te has convertido en un "
           "Mago\n");
    jugador.daño = 500;
    jugador.health1 = 800;
    jugador.health2 = 800;
    jugador.agility = 70;
    jugador.Mana = 2000;
    break;
  }
  jugador.puntosHabilidad = 0;
}

void infoBestiario() {
  int i, contador = 0;
  int Gragof = 0, Karinf = 0, Gorgorothf = 0, Bansheef = 0, Licantropof = 0;
  for (i = 0; i < 5; i++) {
    if (i == 0 && Grago.health2 <= 0) {
      contador++;
    } else if (i == 1 && Karin.health2 <= 0) {
      contador++;
    } else if (i == 2 && Gorgoroth.health2 <= 0) {
      contador++;
    } else if (i == 3 && Banshee.health2 <= 0) {
      contador++;
    } else if (i == 4 && Licantropo.health2 <= 0) {
      contador++;
    }
  }
  Jefe *jefes;
  jefes = (Jefe *)malloc(contador * sizeof(Jefe));
  for (i = 0; i < contador; i++) {
    if (Grago.health2 <= 0 && Gragof == 0) {
      jefes[i] = Grago;
      Gragof = 1;
    } else if (Karin.health2 <= 0 && Karinf == 0) {
      jefes[i] = Karin;
      Karinf = 1;
    } else if (Gorgoroth.health2 <= 0 && Gorgorothf == 0) {
      jefes[i] = Gorgoroth;
      Gorgorothf = 1;
    } else if (Banshee.health2 <= 0 && Bansheef == 0) {
      jefes[i] = Banshee;
      Bansheef = 1;
    } else if (Licantropo.health2 <= 0 && Licantropof == 0) {
      jefes[i] = Licantropo;
      Licantropof = 1;
    }
  }
  if (contador == 0) {
    printf("Ningun jefe ha sido derrotado\n");
  } else {
    printf("------------- Bestiario ------------------------\n");
    for (i = 0; i < contador; i++) {
      printf("Jefe #%d\n", i + 1);
      printf("Nombre: %s\n", jefes[i].name);
      printf("Vida Total: %d\n", jefes[i].health1);
      if (i != contador - 1)
        printf("Informacion: %s\n\n", jefes[i].data);
      else {
        printf("Informacion: %s\n", jefes[i].data);
      }
    }
  }
  free(jefes);
  printf("\n");
  system("pause");
}

void creacionZonas(){
  Zone A0 = {"Desierto de la desolacion",
  "El Desierto de la Desolación se extiende como un vasto y árido paisaje, donde la vida parece haber sido abandonada por completo. Con una extensión sin fin, sus dunas y llanuras de arena se desvanecen hasta el horizonte, ofreciendo una vista desolada y desafiante para aquellos valientes que se aventuran en su territorio inhóspito."};
  Zone B1 = {"Manglares Oscuros", 
"Los Manglares Oscuros se alzan majestuosamente a lo largo de la costa, como guardianes silenciosos de un misterio oculto. Estos densos bosques de árboles retorcidos y raíces serpentinas crean un ambiente enigmático y cautivador. La oscuridad se filtra entre las ramas entrelazadas, proyectando sombras danzantes sobre las aguas tranquilas y pantanosas que rodean los manglares."};
  Zone C2 = {"Magestic Forest",
"En lo más profundo de un reino encantado y oculto, se encuentra el Majestic Forest, un lugar de una belleza indescriptible. Este bosque mágico está impregnado de una energía vibrante que emana de cada rincón, envolviendo a todo aquel que se aventura en sus dominios."};
  Zone D3 = {"La bahia de los ahogados",
  "La Bahía de los Ahogados es un lugar enigmático y sombrío ubicado en una remota región costera. Su nombre evoca un oscuro pasado y una historia llena de tragedias marítimas. Al acercarte a la bahía, una densa niebla se cierne sobre las aguas, ocultando los peligros que yacen bajo su superficie."};
  Zone E4 = {"The END",
"The End es un lugar misterioso y enigmático que se encuentra en lo más profundo de los confines del universo. Es un punto de convergencia donde todas las historias, todos los destinos y todas las posibilidades llegan a su fin. Este lugar está envuelto en un silencio eterno y una oscuridad impenetrable."};
  // Zona A0
  zonita[0].zona = A0;
  zonita[0].numeros[0] = 1;
  zonita[0].size = 1;
  // Zona B1
  zonita[1].zona = B1;
  zonita[1].numeros[0] = 0;
  zonita[1].numeros[1] = 2;
  zonita[1].numeros[2] = 4;
  zonita[1].size = 3;
  // Zona C2
  zonita[2].zona = C2;
  zonita[2].numeros[0] = 1;
  zonita[2].numeros[1] = 3;
  zonita[2].size = 2;
  // Zona D3
  zonita[3].zona = D3;
  zonita[3].numeros[0] = 2;
  zonita[3].numeros[1] = 4;
  zonita[3].size = 2;
  // Zona E4
  zonita[4].zona = E4;
  zonita[4].numeros[0] = 3;
  zonita[4].numeros[1] = 1; 
  zonita[4].size = 2;

}
void avanzarZonas(){
  int num;
  int i;
  for(i = 0; i < zonita[movimiento].size; i++){
    printf("%d. %s\n",i,zonita[zonita[movimiento].numeros[i]].zona.name);
  }
  printf("Digite el numero de la zona a la que quiere moverse: ");
  scanf("%d", &num);
  movimiento = zonita[movimiento].numeros[num];
  char* nombre = zonita[movimiento].zona.name;
  char* descripcion = zonita[movimiento].zona.description;
  printf("%s\n\n", nombre);
  printf("%s\n\n", descripcion);
}
// void exportar_variables() {
//     // Abrir el archivo en modo escritura
//     FILE* archivo = fopen("variables.txt", "w");
//     if (archivo == NULL) {
//         printf("Error al abrir el archivo.\n");
//         return;
//     }
    
//     // Escribir las variables en el archivo
//     fprintf(archivo, "variable1 = %d\n", variable1);
//     fprintf(archivo, "variable2 = %s\n", variable2);
//     fprintf(archivo, "variable3 = {");
//     for (int i = 0; i < sizeof(variable3) / sizeof(variable3[0]); i++) {
//         fprintf(archivo, "%d", variable3[i]);
//         if (i < sizeof(variable3) / sizeof(variable3[0]) - 1) {
//             fprintf(archivo, ", ");
//         }
//     }
//     fprintf(archivo, "}\n");
    
//     // Cerrar el archivo
//     fclose(archivo);
// }
